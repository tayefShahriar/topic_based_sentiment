# -*- coding: utf-8 -*-
"""topic_based_sentiment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VQ7spVMuKw_eIKJQcJgzMD5LJw1PUijc
"""

import json
import pandas as pd
import numpy as np
import re
import sys
import nltk
from nltk.corpus import stopwords, sentiwordnet as swn
from nltk.stem import WordNetLemmatizer
from nltk import ngrams
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.decomposition import LatentDirichletAllocation
import collections
import matplotlib.pyplot as plt
from wordcloud import WordCloud

import numpy as np
import pandas as pd
import os
import nltk
import spacy
from wordcloud import WordCloud
import tensorflow as tf
from tensorflow.keras.preprocessing import text
from tensorflow.keras.preprocessing import sequence
from tensorflow.keras.layers import *
from tensorflow.keras.models import Model, Sequential
from tensorflow.keras.utils import to_categorical
from nltk.corpus import stopwords, words
from nltk.stem import WordNetLemmatizer
import gensim #the library for Topic modelling
from gensim.models.ldamulticore import LdaMulticore
from gensim import corpora, models
from itertools import chain
import time
import re
import tensorflow as tf
import tensorflow_hub as hub
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.metrics import AUC
from sklearn.metrics import confusion_matrix, classification_report
nltk.download('stopwords')
nltk.download('wordnet')
from nltk.corpus import stopwords
stop = set(stopwords.words('english'))

train_data = pd.read_csv('original.csv', encoding='latin-1')

train_data

def target(label):
    if label == 'Neutral': 
        return 0
    if label == 'Positive':
        return 2
    if label=='Extremely Positive':
        return 2
    if label=='Negative':
        return 1
    else:
        return 1           
train_data['score'] = train_data['Sentiment'].apply(target).values
#test_data['score'] = test_data['Sentiment'].apply(target).values

def target_string(label):
    if label == 'Neutral': 
        return 'Neutral'
    if label == 'Positive':
        return 'Positive'
    if label=='Extremely Positive':
        return 'Positive'
    if label=='Negative':
        return 'Negative'
    else:
        return 'Negative'           
train_data['sentiment_polarity'] = train_data['Sentiment'].apply(target_string).values
#test_data['sentiment_polarity'] = test_data['Sentiment'].apply(target_string).values

all_topics = pd.read_csv('book.csv', encoding='latin-1')

all_topics['Dominant_Topic'] = all_topics['Dominant_Topic'].astype(str)

all_topics

results = train_data.groupby(['Dominant_Topic', 'sentiment_polarity']).count().reset_index()

results

results = results.merge(all_topics, on='Dominant_Topic')

results

results['topic_name'] = results['topic_name'].apply(', '.join)

results

graph_results = results[['topic_name', 'sentiment_polarity', 'score']]
graph_results = graph_results.pivot(index='topic_name', columns='sentiment_polarity', values='score').reset_index()

graph_results.set_index('topic_name', inplace=True)

display(graph_results)

plt.rcParams.update({'font.size': 32})
fig = graph_results.plot.barh(rot=0, figsize=(33,16))
fig.figure.savefig('sentiment_analysis.png', bbox_inches='tight')

